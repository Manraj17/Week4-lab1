{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fd90ee05-a854-4728-a280-8d66d927fed1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World!\n"
     ]
    }
   ],
   "source": [
    "# 1. Simple example\n",
    "def say_hello():\n",
    "    print(\"Hello World!\")\n",
    "say_hello()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1c620c3d-af86-45fb-9dbd-ddf64878348b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Greetings Earthlings!\n"
     ]
    }
   ],
   "source": [
    "def say_hello():\n",
    "    print(\"Greetings Earthlings!\")\n",
    "say_hello()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6ae3cb06-080c-427b-a5ca-4c3b47152f0d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to the program!\n",
      "The sum is: 15\n"
     ]
    }
   ],
   "source": [
    "# 3. Welcome message with addition\n",
    "def welcome():\n",
    "    print(\"Welcome to the program!\")\n",
    "\n",
    "def add_numbers():\n",
    "    num1 = 5    \n",
    "    num2 = 10   \n",
    "    result = num1 + num2\n",
    "    return result\n",
    "\n",
    "welcome()\n",
    "print(\"The sum is:\", add_numbers())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "acb34aa1-63a5-4394-b01d-9f7dc3e8387a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, John! How are you today?\n",
      "Hello, Alice! How are you today?\n"
     ]
    }
   ],
   "source": [
    "# Example 1: Greeting with name parameter\n",
    "def greet(name):\n",
    "    print(f\"Hello, {name}! How are you today?\")\n",
    "    \n",
    "greet(\"John\")  \n",
    "greet(\"Alice\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3f711386-5f47-4f1e-b10b-9f82ab93fde3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum: 58\n"
     ]
    }
   ],
   "source": [
    "def add_numbers(num1, num2):\n",
    "    result = num1 + num2\n",
    "    return result\n",
    "\n",
    "sum_result = add_numbers(55, 3)\n",
    "print(\"Sum:\", sum_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8fef2d66-44e5-4790-9802-9da24e52491e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Global variable value: 10\n",
      "5\n",
      "15\n"
     ]
    }
   ],
   "source": [
    "# Example 1: Accessing a Global Variable\n",
    "global_var = 10  # Global variable\n",
    "\n",
    "def show_global():\n",
    "    print(\"Global variable value:\", global_var)  # Can access global variable\n",
    "\n",
    "def modify_local():\n",
    "    local_var = 5    # Local variable\n",
    "    print(\"Local variable value:\", local_var)\n",
    "\n",
    "show_global()      # Works fine\n",
    "# print(local_var) # Would cause error - local_var is not accessible here\n",
    "\n",
    "# Example 2: Using Global Variables to Share Data\n",
    "total = 0  # Global variable to share between functions\n",
    "\n",
    "def add_to_total(amount):\n",
    "    global total    # Declare using global keyword to modify\n",
    "    total += amount\n",
    "    return total\n",
    "\n",
    "print(add_to_total(5))   # Output: 5\n",
    "print(add_to_total(10))  # Output: 15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a8abc836-f398-41ee-8ec0-6ec7fd3086f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result: 20\n"
     ]
    }
   ],
   "source": [
    "def add(num1, num2):\n",
    "    return num1 + num2\n",
    "\n",
    "def multiply(num1, num2):\n",
    "    return num1 * num2\n",
    "\n",
    "def add_and_multiply(num1, num2, num3):\n",
    "    sum_result = add(num1, num2)          # Call add function\n",
    "    final_result = multiply(sum_result, num3)  # Call multiply with sum\n",
    "    return final_result\n",
    "\n",
    "# Test the functions\n",
    "result = add_and_multiply(2, 3, 4)\n",
    "print(\"Result:\", result)  # Output: Result: 20\n",
    "# Explanation: (2 + 3) * 4 = 5 * 4 = 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7ce7d00-563e-4372-a1e4-16f49657533f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
